-- SECTIONS -- 

-> Table of Contents
	-> Overview
		-> Introduction to the Wave Music Community
		-> Overview of the application's main functionality
		-> Technology Stack
			-> React
			-> Redux
			-> Express
			-> Neo4J
		-> Project Structure
			-> Overall Directory Structure
			-> Directory Structure Within a React Component
	-> Front End
		-> React
		-> CSS Modules
		-> Render-time component preparation
		-> Implemented Designs/Design Patterns
			-> Buttons
			-> Selection Indicators
			-> Cards
			-> Dividers
			-> Cradles
			-> Gallery
			-> Graph Visualization
			-> Map 
			-> Search Bar
			-> Side Menu
			-> Table
			-> Tree View
	-> State Management
		-> Redux
			-> Action Strings
			-> Action Creators
			-> Reducers
			-> Store
			-> AppContainer HoC
			-> Provider Component
			-> Wrapped App
		-> Special Cases for Component State
		-> Thunk Middleware
		-> Future Improvements
	-> Back End
		-> Server
		-> Neo4J Database
			-> Intro to Neo4J
			-> Data Model
			-> Construction Strategy Around WaveCity Cluster
			-> Planned Queries
	-> Graphic Design
		-> Icon Library
		-> Font Sizing and Styling
		-> Color Scheme
	-> Routing
		-> Declarative Routing Primer
		-> React Router
		-> Top-Level Application Routing
		-> Dynamic Routing In Documentation Section
	-> Testing
		-> Jest Test Runner and Suite
		-> Enzyme
		-> Smoke Tests
		-> Future Improvements
			-> Advanced Mocking and Scenarios
			-> Integration Testing
			-> E2E Testing
			-> Database Test Suite 
	-> Accessibility
		-> Future Additions
	-> Security
		-> Keeping application features and development in scope
			 with current security capabilties.
		-> Anchor links
	-> Future Improvements
		-> UI Improvements
		-> Adding Events as a Map Layer
		-> Internationalization
	-> Active Problem Areas
		-> React Refs
		-> SVG Rendering Issues
		-> Linting Issues
		-> Card Gallery Behavior
-> Overview
	-> Introduction to wave scene
	-> Overview of what application is and how it is intended to help and support that community. Go through major UX flows built into the application.
	-> Overall strategy is to create an application that is tightly scoped to my current capabilities and the type of 
	   role that I am applying for, but that is architectured to scale in functionality/capability and into to-be-developed 
	   sections such as my back-end server and database. 
		-> Technical Scope
		-> Feature Scope
	-> Tech Stack
		-> React for UI (bootstrapped from create-react-app to get started)
			-> Provide link that goes into front end section of documentation.
		-> Redux for state management
			-> Provide link that goes into state management section of documentation.
		-> Neo4J for database 
			-> Provide link that goes into data persistence section of documentation.
		-> Explain in next steps that you plan on implementing an express server which will proxy requests from React application, serve the application, and connect to Neo4J database in real time. 			
	-> Project structuring.
		-> Overall directory structure.
			-> Disclaimer about excuding certain boilerplate items like .rc files, node modules, package.json, package-lock.json, README.md etc...
			-> client (holding overall UI client that runs the front end.)
				-> build (exported build version of application, which is deployed to heroku)
				-> public (holds static content such as profile images)
				-> src (holds all source code used to build react application.)
					-> Components (holds all components used to build the application, explain that you go into further
												 detail regarding the folder structure you use within components.)
					-> Datasets (holds static dataset of artists you pull from currently to serve application. Explain
										   that eventually, this data structure will be queried from and resolved into the state tree
										   in the redux store from a database query eventually.)
			    -> GlobalStyles (contains css and scss files that contain variables for application-wide considerations around
			    								 colors, default component sizing, box shadows, fonts, z-indexes, etc...) 
			    -> Helpers
			    	-> generalDataStructures (Currently contains an enum structure for different sort criteria, will 
			    		 											  contain similar data structures as the need for them arises.)
			    	-> socialMediaIconComponents (Transforms all social media SVGs into react components and exports them in an object.)
			  	-> Redux 
			  		-> ActionCreators (holds functions that return actions of different types to be resolved by the reducer)
			  		-> Reducers (receive actions from the UI and modify the state tree to reflect their intent)
			  		-> actionStrings (action type strings are saved into constant variables rather than hardcoded)
			  		-> helpers.js (encapsulates application logic such as sorting displayed artists or searching through 
			  									 them into functions to be imported and used by the reducer.)
			  		-> Initializes application state, initializes and exports the redux store, and greenlights hot reloading for reducer components.
			  	-> index.js (Renders top-level component and injects it at the mount point of the index.html file)
			-> Design (holds photoshop and illustrator files from production of assets like jumbotron image and icon library)
		-> Strategy for folder structures within a component. 
			-> Main Component JS file.
			-> Stylesheet
			-> Helpers JS file.
			-> Tests
			-> Sub-Components that make sense in context of application or the parent 
			component, but not as overall components in the rest of the library. 
-> Front End 
	-> React
	-> CSS Modules
		-> Written in SCSS
		-> Syntax to be picked up by 
			 webpack (node-sass npm package)
			 -> Reference medium article that helped set it up.
		-> Overall translation into 
			 in-browser DOM elements.
  -> Go through the global CSS that is included
		-> Base styling
		-> Variables
			-> Fonts
			-> Colors
			-> z Indexes
	-> Render-time component preparation
		-> Logic that maps state, props, 
		   and context to the filtering
		   of certain css classes.
		-> Construction of class lists
		-> Export object that contains
		   these classlists
		   -> Aside about classlists 
		      dependency.
		-> Assignment of these classlists
		   to their appropriate places in 
		   the render template.
	-> Implemented Design Patterns
		-> Buttons
			-> Types
			-> Rounded option
		-> Selection Indicators
			-> Shapes
			-> Further Use Cases
				-> Check Boxes
				-> Radio Button Sets
		-> Profile Card (TwoSize in this application)
			-> Open/Closed Toggle
			-> Population of social media
				 icon list
			-> Display demo card to play with.
			-> Potential to have card open and close horizontally.
		-> Dividers
			-> Horizontal and vertical
			-> Variable heights/widths
			-> Variable margin/padding
		-> Cradles
		-> Card Gallery
		-> Graph Visualization
		-> Map 
		-> Search Bar
			-> Implementation of Controlled Component
		-> Side Menu
			-> Fixed positioning
			-> Open / Close Animations
		-> Table
			-> Ability to enter table header and footer
		-> Tree View
			-> Feeding flattened data tree to component as props
			-> Recursive generation of Tree Structure
	-> Color Themes
		-> Context API
			-> ThemeContext creation
			-> Importing ThemeContext
			   /setting defaultContext
			-> Referencing this.context
		-> autoTheme assignment based on local time when app mounts	
-> State Management
	-> Redux
		-> Action Strings
			-> Scalability Considerations
		-> Action Creators
			-> Scalability Considerations
		-> Reducers
		-> Store
		-> Generation of Container 
			 Component for App.
		-> Provider Component
	-> Some local state for certain components
	-> Redux-Thunk for async connection to API server
	-> Future Improvements
		-> Reducer Composition
		-> Modularize application into 
		sectioned containers that have
		part of state tree and action
		dispatchers mapped to their props.
		-> As state tree gets larger and 
		increasingly nested, normalize it
		into a flattened structure.
		-> Flatten state tree
		-> Move documentation tree into redux store
-> Back End	
	-> Server
		-> Express
		-> Proxying requests from client server through to API server
  -> Neo4J Database
		-> High Level Intro to Neo4J
			-> Intro to graphs
			-> How this is implemented into a database tech
				-> Nodes
				-> Relationships
				-> CYPHER
			-> How it differentiates itself from SQL, NoSQL
				-> Relationships as first class citizens
				-> Graph traversal
				-> Performance benefits for highly interconnected data
		-> Data model 
			-> Future Additions
				-> Events
				-> Labels/Collectives
				-> Community members who are not necessarily musicians.
					-> Graphic/Motion/Visual artists
					-> DJs 
					-> Promoters
					-> Software Developers
	  -> Planned Queries
	  	-> Grabbing some/all artists from the database
	  	-> Adding people/artists into the database
	-> Future Improvements
    -> GraphQL vs. Redux, limitations of a REST API eventually. 	  	
-> Graphic Design
	-> Icon library
	-> Predictable font size through rem scaling
	-> Color scheme
-> Routing
	-> Declarative Routing
	-> React Router
	-> Top App level routing
	-> Dynamic routing within the documentation section
-> Testing
	-> Enzyme, Jest
	-> Smoke tests,
	-> Future Improvements	
		-> Advanced Mocking and Scenarios
		-> Integration Testing
		-> E2E Testing
		-> Database Test Suite
-> Accessibility
	-> Semantic HTML
		-> Good HTML
		-> React Fragments instead of wrapper divs
	-> Titles as fallbacks on images
	-> High color contrast in both light and dark themes
	-> Future additions
		-> Aria labels
		-> Focus Control
		-> Skip Links
		-> Dynamic Page Titles
		-> Testing With Screen Readers
-> Security
	-> Measured hesitancy to introduce file storage, profiles, messaging until proper security planning/analysis and architecture is carried out.
	-> rel="noopen noreferrer" on anchor links
-> Future Improvements
	-> UI Improvements
		-> Mobile Integration
			-> Nav bar losing top right buttons at certain width.
			-> Table Items wrapping into a two row item, flow social media buttons into bottom row. 
			-> Unexpected behavior from React's SVG wrapper components, maybe just switch to splicing them inline
				 from props to another presentational template component.
	-> Ability to add upcoming events into the application and have them pop up on a map and in different components.
	-> Internationalization
-> Active Problem Areas
	-> Ref on search input to focus on magnifying glass click
	-> SVG Rendering Problems
		-> Airbnb's babel package
			-> Outputed component names are not PascalCased
		-> Create React App's methodology
			-> Unpredictable hover effects
			-> Unpredictable stroke width effects
	-> Linting issues in text editor.
	-> Gallery cards remaining in open state on sort
		-> Either find a way for all cards to close 
			 or find a way to persist which ones were open.
	-> Sorts are working for the most part except for a few stubborn items.


